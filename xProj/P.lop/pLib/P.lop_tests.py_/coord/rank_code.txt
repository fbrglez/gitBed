def rank(coord = [4, 1, 2, 3]):
    thisProc = "P.coord.rank"
    ABOUT = """
This function takes a permutation coordinate as a list such as [4, 1, 2, 3] and
returns its inversion number, which can also be interpreted as the distance 
from [1, 2, 3, 4] or also as 'the rank' of the coordinate in the Hasse graph 
with respect to its coordinate in natural order, here [1, 2, 3, 4].
"""
    if coord == "??":
        print ABOUT
        return
    elif coord == "?":
        print "Valid query is '{} ??'".format(thisProc)
        return
        #raise Exception("Valid query is '{} ??'".format(thisProc))
        #sys.stderr.write("Valid query is '{}' ??'\n".format(thisProc))
        #sys.exit(1)

    # Standard definition for permutation inversion: given a permutation 
    # b_1, b_2, b_3,..., b_n of the n integers 1, 2, 3, ..., n, 
    # an inversion is a pair (b_i, b_j) where i < j and b_i > b_j.
    size = len(coord)
    inversion = 0
    for i in xrange(size):
        b_i = coord[i]
        for j in xrange(i+1, size):
            b_j = coord[j]
            if (i < j and b_i > b_j):
                inversion += 1
    
    return inversion
